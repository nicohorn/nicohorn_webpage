{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nico Horn's blog",
    "home_page_url": "https://nicohorn.com",
    "feed_url": "https://nicohorn.com/rss/feed.json",
    "description": "Welcome to my blog! Here I post my own thoughts and views about tech, philosophy and pretty much anything that comes to my mind.",
    "icon": "https://nicohorn.com/ms-icon-144x144.png",
    "author": {
        "name": "Nico Horn",
        "url": "https://nicohorn.com"
    },
    "items": [
        {
            "id": "https://nicohorn.com/en-US/blog/b05b746b-2120-4a4f-8b38-4d06d3378dbc",
            "content_html": "<p>RSS feed are to me the original way to surf the web. Lately I've been feeling that the mainstream internet (social media such as Instagram, Tiktok, X , etc) is losing its spark. Some people adhere to the \"dead internet theory\", which might be part of the issue. What I do think is that back in the day, people used to connect and share more genuine stuff on the internet, and one of the most efficient ways is using an RSS feed. Here's how to do it using <code>Next.js</code></p><p>Before we get to it, don't forget to subscribe to mine! üòÅ</p><p></p><h1><strong>What we'll do:</strong></h1><ol><li><p>Get blog entries data.</p></li><li><p>Create a util function that writes XML and JSON files to our server file system (effectively creating the RSS feed).</p></li><li><p>Call the function at build time and making it run with a Vercel cron job.</p></li></ol><p></p><p></p><p>First of all, install the following dependency into your project</p><pre><code class=\"language-node\">npm install feed</code></pre><h1><strong>Create a util function</strong></h1><p>First, I created a JavaScript file. This is where the whole logic to create the RSS feed resides.</p><pre><code class=\"language-javascript\">/src/utils/generateRSSfeed.js\n\nimport { Feed } from \"feed\"\n\nconst generateRssFeed = async () =&gt; {\n    //Code to generate the RSS feed\n}\n\nexport default generateRssFeed();</code></pre><h1><strong>Get blog entries data</strong></h1><p>Using the JavaScript <code>fetch</code> API:</p><pre><code class=\"language-javascript\">/src/utils/generateRSSfeed.js\n\n    const postsFetch = await fetch(`https://nicohorn.com/api/blog_entry`, {\n        method: \"GET\",\n    });</code></pre><p>Let's define some useful variables</p><pre><code class=\"language-typescript\">/src/utils/generateRSSfeed.js    \n\n    const postsFetch = await fetch(`https://nicohorn.com/api/blog_entry`, {\n        method: \"GET\",\n    });\n    const posts = await postsFetch.json();\n    const siteURL = \"https://nicohorn.com\";\n    const date = new Date();\n    const author = {\n        name: \"Nico Horn\",\n        email: \"contact@nicohorn.com\",\n        link: \"https://nicohorn.com\"\n    }</code></pre><p>Now, using the Feed library, we do the following:</p><pre><code class=\"language-typescript\">/src/utils/generateRSSfeed.js\n\n    const feed = new Feed({\n        title: \"Nico Horn's blog\",\n        description: \"Welcome to my blog! Here I post my own thoughts and views about tech, \n        philosophy and pretty much anything that comes to my mind.\",\n        id: siteURL,\n        link: siteURL,\n        image: `https://nicohorn.com/ms-icon-144x144.png`,\n        copyright: `All rights reserved ${date.getFullYear()}, Nico Horn`,\n        updated: date,\n        generator: \"Feed for Node.js\",\n        feedLinks: {\n            rss2: `${siteURL}/rss/feed.xml`,\n            json: `${siteURL}/rss/feed.json`,\n            atom: `${siteURL}/rss/atom.xml`\n        },\n        author\n    })</code></pre><p>Add each entry to the feed we just created:</p><pre><code class=\"language-typescript\">/src/utils/generateRSSfeed.js\n\n    posts?.forEach((post) =&gt; {\n        const entryURL = `${siteURL}/en-US/blog/${post.id}`\n\n        feed.addItem({\n            title: post.title,\n            id: entryURL,\n            link: entryURL,\n            description: post.description,\n            content: post.content,\n            image: post.cover_image,\n            author: [author],\n            contributor: [author],\n            date: new Date(post.created_at),\n        })\n    })</code></pre><p>Lastly, use the <code>fs</code> Node module to create a folder and write the files in the server:</p><pre><code class=\"language-typescript\">/src/utils/generateRSSfeed.js\n    \n    fs.mkdirSync(\"./public/rss\", { recursive: true });\n    fs.writeFileSync(\"./public/rss/feed.xml\", feed.rss2());\n    fs.writeFileSync(\"./public/rss/atom.xml\", feed.atom1());\n    fs.writeFileSync(\"./public/rss/feed.json\", feed.json1());</code></pre><p><strong>Final code:</strong></p><pre><code class=\"language-typescript\">/src/utils/generateRSSfeed.js\n\nimport { Feed } from \"feed\"\nimport fs from \"fs\";\n\nconst generateRssFeed = async () =&gt; {\n\n    //This console log will appear in the console at build time.\n    console.log(\"Creating RSS feed\");\n    const postsFetch = await fetch(`https://nicohorn.com/api/blog_entry`, {\n        method: \"GET\",\n    });\n    const posts = await postsFetch.json();\n    const siteURL = \"https://nicohorn.com\";\n    const date = new Date();\n    const author = {\n        name: \"Nico Horn\",\n        email: \"contact@nicohorn.com\",\n        link: \"https://nicohorn.com\"\n    }\n\n    const feed = new Feed({\n        title: \"Nico Horn's blog\",\n        description: \"Welcome to my blog! Here I post my own thoughts and views about tech, \n        philosophy and pretty much anything that comes to my mind.\",\n        id: siteURL,\n        link: siteURL,\n        image: `https://nicohorn.com/ms-icon-144x144.png`,\n        copyright: `All rights reserved ${date.getFullYear()}, Nico Horn`,\n        updated: date,\n        generator: \"Feed for Node.js\",\n        feedLinks: {\n            rss2: `${siteURL}/rss/feed.xml`,\n            json: `${siteURL}/rss/feed.json`,\n            atom: `${siteURL}/rss/atom.xml`\n        },\n        author\n    })\n\n    posts?.forEach((post) =&gt; {\n        const entryURL = `${siteURL}/en-US/blog/${post.id}`\n\n        feed.addItem({\n            title: post.title,\n            id: entryURL,\n            link: entryURL,\n            description: post.description,\n            content: post.content,\n            image: post.cover_image,\n            author: [author],\n            contributor: [author],\n            date: new Date(post.created_at),\n        })\n    })\n\n    fs.mkdirSync(\"./public/rss\", { recursive: true });\n    fs.writeFileSync(\"./public/rss/feed.xml\", feed.rss2());\n    fs.writeFileSync(\"./public/rss/atom.xml\", feed.atom1());\n    fs.writeFileSync(\"./public/rss/feed.json\", feed.json1());\n\n}\n\n//This one I use it on the endpoint that the cron job runs.\nexport { generateRssFeed }\n//It's exported like this, executed, because it'll be caled directly by a Node command in the CLI.\nexport default generateRssFeed();</code></pre><h1><strong>Call the function at build time</strong></h1><p>Simply add the following command in the <code>package.json</code></p><pre><code class=\"language-json\">node ./src/utils/generateRSSfeed.js</code></pre><pre><code class=\"language-json\">/package.json \n\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"node ./src/utils/generateRSSfeed.js &amp;&amp; next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },</code></pre><p>Also, don't forget to add <code>\"type\": \"module\"</code> at the root level in the <code>package.json</code>. </p><p>That should be it. I ran into a few problems such as having to rename the <code>postcss.config.js</code> to <code>postcss.config.cjs</code> given that it's a CommonJS module.</p><h1><strong>Cron job</strong></h1><p>Now, what I did so far only works at build time, which is not all that useful if we want to keep our feed updated automatically. To solve this, I'm using a cron job that Vercel let us configure directly into the project. We could also call the function that creates the RSS feed into the POST endpoint where I create the blog post, but I had never used cron jobs in Vercel so I thought it would be nice to try it out.</p><p>Learn more about cron jobs in Vercel: <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://vercel.com/docs/cron-jobs\">Cron Jobs (</a><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"http://vercel.com\">vercel.com</a><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://vercel.com/docs/cron-jobs\">)</a></p><p>Create a route.ts into the api folder in the project. The structure should look like this:</p><blockquote><p>-/api</p><p>    -/cron</p><p>        -route.ts</p></blockquote><pre><code class=\"language-typescript\">/api/cron/route.ts\n\nimport { generateRssFeed } from '@/utils/generateEnglishRSSfeed';\nimport type { NextRequest } from 'next/server';\n\nexport function GET(request: NextRequest) {\n    const authHeader = request.headers.get('authorization');\n    if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {\n        return new Response('Unauthorized', {\n            status: 401,\n        });\n    }\n\n    generateRssFeed();\n\n    return Response.json({ success: true });\n}</code></pre><p>And now, create a <code>vercel.json</code> file at the root level of your project to configure the cron job. In this case, this cron job runs everyday at 1:00AM.</p><p>To learn more about cron jobs: <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://cronitor.io/guides/cron-jobs?utm_source=crontabguru&amp;utm_campaign=cron_reference&amp;utm_content=22\">Cron Jobs: The Complete Guide for 2024 (</a><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"http://cronitor.io\">cronitor.io</a><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://cronitor.io/guides/cron-jobs?utm_source=crontabguru&amp;utm_campaign=cron_reference&amp;utm_content=22\">)</a></p><pre><code class=\"language-json\">{\n  \"crons\": [\n    {\n      \"path\": \"/api/cron\",\n      \"schedule\": \"0 1 * * *\"\n    }\n  ]\n}</code></pre><p>That's all, enjoy!</p>",
            "url": "https://nicohorn.com/en-US/blog/b05b746b-2120-4a4f-8b38-4d06d3378dbc",
            "title": "How to create an RSS feed from a Next.js website",
            "summary": "It's been a while since I wanted to have my own RSS feed, so I got to work on it. Here I'm sharing how to do it with using Next.js App router. ",
            "image": "https://wfqmvtjbaiggzoiwhxjy.supabase.co/storage/v1/object/public/nicohorn_website/blog_images/OIG4.CY6.cbeM9..jpg",
            "date_modified": "2024-03-15T06:59:10.487Z",
            "author": {
                "name": "Nico Horn",
                "url": "https://nicohorn.com"
            }
        },
        {
            "id": "https://nicohorn.com/en-US/blog/154107f0-82c0-4a73-bfd4-b216df229821",
            "content_html": "<h2>Problem description:<strong> detect a click outside an HTML Element</strong></h2><p>Although there's many component libraries that solve this problem, it's always nice when building our own website to do all the little things by ourselves. In my case, I've always liked doing modals from scratch. Well, not so from scratch since I'm using React to manage the state, but otherwise, this approach works for plain HTML and JS. In my case, for a better user experiences, I like making my modals so that they close when the user click \"outside\" it, as shown in the image below.</p><p></p><img class=\"tiptap_image\" src=\"https://wfqmvtjbaiggzoiwhxjy.supabase.co/storage/v1/object/public/nicohorn_website/blog_images/Untitled-2024-03-02-0056.png\" alt=\"blog image\"><p></p><p>So my approach was the following: when we attach an event listener to an element, such as the <code>#modal</code> we get an output with an object that contains all the info related to the event. In this case, the event listener would be an <code>onclick</code> so I went with the following solution, which is by far the simplest solution I know so far:<br><br></p><img class=\"tiptap_image\" src=\"https://wfqmvtjbaiggzoiwhxjy.supabase.co/storage/v1/object/public/nicohorn_website/blog_images/clickoutside.png\" alt=\"blog image\"><p></p><img class=\"tiptap_image\" src=\"https://wfqmvtjbaiggzoiwhxjy.supabase.co/storage/v1/object/public/nicohorn_website/blog_images/htmlstructure.png\" alt=\"blog image\"><p></p><p>That's it, try it out. Have fun!</p>",
            "url": "https://nicohorn.com/en-US/blog/154107f0-82c0-4a73-bfd4-b216df229821",
            "title": "Detect click outside HTML element",
            "summary": "This is a fairly easy thing to do, but I never found a concise and simple explanation for it. This is my attempt at doing that.",
            "image": "https://wfqmvtjbaiggzoiwhxjy.supabase.co/storage/v1/object/public/nicohorn_website/blog_images/valery-sysoev-p9OkL4yW3C8-unsplash.jpg",
            "date_modified": "2024-03-03T09:12:18.989Z",
            "author": {
                "name": "Nico Horn",
                "url": "https://nicohorn.com"
            }
        },
        {
            "id": "https://nicohorn.com/en-US/blog/e6d998e8-a1e1-4288-beb8-597e0a39e70d",
            "content_html": "<h1>Hello World</h1><p>Its been a long time since I wanted to craft and publish my own blog, been postponing it for more than 3 years actually. There are a lot of options out there for people who love to write but don't want to spend some serious hours coding their own blog, which I understand and respect, but in my case, I always wanted to do it my way, having to learn and try things out, the old fashioned way. The thing is, I love building stuff and I love sharing my thoughts and experiences, so that's a pretty good excuse for building this from scratch.</p><img class=\"tiptap_image\" src=\"https://wfqmvtjbaiggzoiwhxjy.supabase.co/storage/v1/object/public/nicohorn_website/blog_images/nicolas.png\" alt=\"blog image\"><p>I'm Nico, I'm a software engineer, computer science graduate and I also teach at a local university. I have gathered some knowledge in the past few years as a developer but I can't stay put, I always feel that there's so much more to learn and, as the clich√© goes, the more I learn, the less I know. This is my space to share that journey, to share what I learn and my thoughts on it. Knowledge should be shared and I'm here for it. </p>",
            "url": "https://nicohorn.com/en-US/blog/e6d998e8-a1e1-4288-beb8-597e0a39e70d",
            "title": "Hey there",
            "summary": "Welcome to my blog! This is the first entry (in english) I'm making. Let me introduce myself.",
            "image": "https://wfqmvtjbaiggzoiwhxjy.supabase.co/storage/v1/object/public/nicohorn_website/blog_images/sajad-nori-21mJd5NUGZU-unsplash.jpg",
            "date_modified": "2024-03-01T05:08:58.291Z",
            "author": {
                "name": "Nico Horn",
                "url": "https://nicohorn.com"
            }
        }
    ]
}